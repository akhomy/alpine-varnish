sub vcl_backend_response {
    set beresp.http.X-VC-Req-Host = bereq.http.host;
    set beresp.http.X-VC-Req-URL = bereq.url;
    set beresp.http.X-VC-Req-URL-Base = regsub(bereq.url, "\?.*$", "");

    if (beresp.grace < {{ getenv "VARNISH_BACKEND_GRACE" "2m" }}) {
        set beresp.grace = {{ getenv "VARNISH_BACKEND_GRACE" "2m" }};
    }

    # Overwrite ttl with X-VC-TTL.
    if (beresp.http.X-VC-TTL) {
        set beresp.ttl = std.duration(beresp.http.X-VC-TTL + "s", 0s);
    }

    if (beresp.http.Set-Cookie) {
        set beresp.ttl = 0s;
    }

    # Cache ESI request for a time taken from X-ESI-TTL header.
    if (beresp.http.X-ESI-TTL) {
        set beresp.ttl = std.duration(beresp.http.X-ESI-TTL + "s", 1h);
        unset beresp.http.X-ESI-TTL;
        set beresp.http.X-VC-Cacheable = "YES:Is cacheable, ttl: " + beresp.ttl;
    } else if (bereq.http.X-VC-Cacheable ~ "^NO") {
        set beresp.http.X-VC-Cacheable = bereq.http.X-VC-Cacheable;
        set beresp.uncacheable = true;
        set beresp.ttl = {{ getenv "VARNISH_DEFAULT_TTL" "120s" }};

    } else if (beresp.ttl <= 0s) {
        if (!beresp.http.X-VC-Cacheable) {
            set beresp.http.X-VC-Cacheable = "NO:Not cacheable, ttl: "+ beresp.ttl;
        }
        set beresp.uncacheable = true;
        set beresp.ttl = {{ getenv "VARNISH_DEFAULT_TTL" "120s" }};

    } else if (beresp.http.Cache-Control ~ "private") {
        set beresp.http.X-VC-Cacheable = "NO:Cache-Control=private";
        set beresp.uncacheable = true;
        set beresp.ttl = {{ getenv "VARNISH_DEFAULT_TTL" "120s" }};

    } else if (beresp.http.Cache-Control ~ "no-cache") {
        set beresp.http.X-VC-Cacheable = "NO:Cache-Control=no-cache";
        set beresp.uncacheable = true;
        set beresp.ttl = {{ getenv "VARNISH_DEFAULT_TTL" "120s" }};

    } else if (beresp.http.X-VC-Enabled ~ "true") {
        if (!beresp.http.X-VC-Cacheable) {
            set beresp.http.X-VC-Cacheable = "YES:Is cacheable, ttl: " + beresp.ttl;
        }

    } else if (beresp.http.X-VC-Enabled ~ "false") {
        if (!beresp.http.X-VC-Cacheable) {
            set beresp.http.X-VC-Cacheable = "NO:Disabled";
        }
        set beresp.ttl = 0s;
    }

    if (beresp.status == 404 || beresp.status >= 500) {
        set beresp.ttl = 0s;
        set beresp.grace = {{ getenv "VARNISH_ERRORS_GRACE" "15s" }};
    }

    # Set ban-lurker friendly custom headers.
    set beresp.http.X-Url = bereq.url;
    set beresp.http.X-Host = bereq.http.host;

    if (beresp.http.Surrogate-Control ~ "BigPipe/1.0") {
        set beresp.do_stream = true;
        set beresp.ttl = 0s;
    }

    # Check for ESI acknowledgement and remove Surrogate-Control header
    if (beresp.http.Surrogate-Control ~ "ESI/1.0") {
        unset beresp.http.Surrogate-Control;
        set beresp.do_esi = true;
    }

    {{ if and (getenv "VARNISH_SECONDARY_STORAGE_CONDITION") (getenv "VARNISHD_SECONDARY_STORAGE") }}
    if ({{ getenv "VARNISH_SECONDARY_STORAGE_CONDITION" }}) {
      set beresp.storage_hint = "secondary";
      set beresp.http.x-varnish-storage = "secondary";
    }
    {{ end }}

    if (beresp.http.Content-Type ~ "text/html") {
      unset beresp.http.Cache-Control;
      set beresp.http.Cache-Control = "no-cache, max-age=0";
    }
    return(deliver);
}
sub vcl_hit {
  # 5% of the time ignore that we got a cache hit and send the request to the
  # backend anyway for instrumentation.
  if (std.random(0, 100) < 5) {
    set req.http.PS-ShouldBeacon = "{{ getenv "VARNISH_PURGE_KEY" "secret" }}";
    return (pass);
  }
}
sub vcl_miss {
  # Instrument 25% of cache misses.
  if (std.random(0, 100) < 25) {
    set req.http.PS-ShouldBeacon = "{{ getenv "VARNISH_PURGE_KEY" "secret" }}";
    return (pass);
  }
}